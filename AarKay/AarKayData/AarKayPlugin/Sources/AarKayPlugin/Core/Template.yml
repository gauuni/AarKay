name: Template
isPlugin: false
properties:
  - isTemplate|Bool!|true
  - isPlugin|Bool!|true
  - name|String
  - module|String!|self.name
  - base|String?
  - dir|String?
  - templates|[TemplateStringModel]?
  - subs|[TemplateModel]?
  - inputSerializer|String?
  - customDecoder|Bool!|false
  - properties|[ArgModel]!|[]
  - baseProperties|[ArgModel]!|[]
  - computedProperties|[ArgModel]?
computedProperties:
  - allProperties|[ArgModel]?
  - requiredProperties|[ArgModel]?
  - requiredBaseProperties|[ArgModel]?
  - requiredAllProperties|[ArgModel]?
templates:
  - ext: swift
    string: |
      //     _____                  ____  __.
      //    /  _  \ _____ _______  |    |/ _|____  ___.__.
      //   /  /_\  \\__  \\_  __ \ |      < \__  \<   |  |
      //  /    |    \/ __ \|  | \/ |    |  \ / __ \\___  |
      //  \____|__  (____  /__|    |____|__ (____  / ____|
      //          \/     \/                \/    \/\/
      //

      import AarKayKit
      {% if isPlugin %}
      import AarKayPlugin
      {% endif %}
      import Foundation
      {% for import in imports %}
      import {{import}}
      {% endfor %}
      {% if isTemplate %}

      public class {{name}}: {% if base %}{{base}}{% else %}NSObject, Templatable{% endif %} {
          {% if not base %}
          public var datafile: Datafile
          {% endif %}
          private var model: {{name}}Model

          public required init(datafile: Datafile) throws {
              self.datafile = datafile
              self.model = try self.datafile.dencode(type: {{name}}Model.self)
              {% if base %}try super.init(datafile: datafile){% endif %}
          }
          {% if inputSerializer %}

          public static func inputSerializer() -> InputSerializable {
              return {{inputSerializer}}InputSerializer()
          }
          {% endif %}
      }
      {% endif %}

      {% if not allProperties %}
      public class {{name}}Model: {% if base %}{{base}}Model{% else %}Codable{% endif %} {}
      {% else %}
      public class {{name}}Model: {% if base %}{{base}}Model{% else %}Codable{% endif %} {
          {% for property in properties %}
          public var {{property.name}}: {{property.type}}
          {% endfor %}
          {% if computedProperties %}
          {% for property in computedProperties %}

          public var {{property.name}}: {{property.type}} {
              /// <aarkay {{property.name}}>
              /// your code goes here.
              /// </aarkay>
          }
          {% endfor %}
          {% endif %}

          private enum CodingKeys: String, CodingKey {
              {% for property in allProperties %}
              case {{property.name}}
              {% endfor %}
          }
          {% if properties %}

          {% if base %}override {% endif %}public init({% for property in requiredAllProperties %}{{property.name}}: {{property.type}}{% if not forloop.last %}, {% endif %}{% endfor %}) {
              {% for property in requiredProperties %}
              self.{{property.name}} = {{property.name}}
              {% endfor %}
              {% if base %}
              super.init({% for property in requiredBaseProperties %}{{property.name}}: {{property.name}}{% if not forloop.last %}, {% endif %}{% endfor %})
              {% endif %}
          }
          {% if not customDecoder %}

          public required init(from decoder: Decoder) throws {
              let container = try decoder.container(keyedBy: CodingKeys.self)
              {% for property in properties %}
              self.{{property.name}} = try container.decode{% if property.isOptionalOrWrapped %}IfPresent{% endif %}({{property.swiftType}}.self, forKey: .{{property.name}}){% if property.value %} ?? {{property.value}}{% endif %}
              {% endfor %}
              {% if base %}
              try super.init(from: decoder)
              {% endif %}
          }
          {% else %}

          public required init(from decoder: Decoder) throws {
              /// <aarkay decoder>
              /// your code goes here.
              /// </aarkay>
          }
          {% endif %}
          {% endif %}

          public{% if base %} override{% endif %} func encode(to encoder: Encoder) throws {
              var container = encoder.container(keyedBy: CodingKeys.self)
              {% for property in allProperties %}
              try container.encode{% if property.isOptional %}IfPresent{% endif %}({{property.name}}, forKey: .{{property.name}})
              {% endfor %}
              {% if base %}
              try super.encode(to: encoder)
              {% endif %}
          }
      }
      {% endif %}
